# This must be the first task for bootstrapping!
#
# If requiretty is set on the remote host, the bootstrapping itself will
# fail because of pipelining.  Instead, we force the use of paramiko, which
# does not do pipelining.  Alternatively, we could remove the paramiko
# connection specification, but then users would have to run:
#   ANSIBLE_SSH_PIPELINING=0 ansible-playbook playbooks/bootstrap.yaml ...
# - name: remove requiretty from sudoers
#   connection: paramiko
#   lineinfile:
#     path: /etc/sudoers
#     state: absent
#     regexp: ^\s*Defaults\s+requiretty$
#     validate: /usr/sbin/visudo -cf %s
#   when: ansible_connection != "local"

- name: Explicitly gather facts
  ansible.builtin.setup:

# NOTE: It seems weird to run this so late, since other things have assumed
# NOTE: that sudo exists.  However, if this matters (i.e. sudo is not
# NOTE: installed), then the user MUST specify a become_method on the command
# NOTE: line for this role to work at all, so it doesn't really matter when
# NOTE: this particular task is run.
- name: Install sudo and acl
  ansible.builtin.apt:
    name:
      - sudo
      - acl
    state: present
    cache_valid_time: 3600
    force_apt_get: yes

- name: Allow ansible user to have passwordless sudo
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/ansible
    regexp: "^ansible "
    line: "ansible ALL=(ALL) NOPASSWD: ALL"
    # Older systems require this to be 0440 or sudo breaks.
    mode: 0440
    create: yes
    validate: /usr/sbin/visudo -cf %s

- name: Add ansible user and set groups
  ansible.builtin.user:
    name: ansible
    home: "/home/ansible"

- name: Generate Key for ansible and store in Password Manager
  block:
    - name: Generate an OpenSSH keypair
      delegate_to: localhost
      become: false
      # become_method: runas
      # become_user: "{{ lookup('ansible.builtin.env', 'USER') }}"
      ansible.builtin.command: ssh-keygen -C ansible@{{ inventory_hostname_short }} -N {{ passphrase }} -t ed25519 -f tmpsshid
      vars:
        passphrase: '{{ lookup("community.general.passwordstore", "ansible/{{inventory_hostname_short}}/passphrase", create=true) }}'

    # - name: Delete old authorized_keys file
    #   become: true
    #   become_user: ansible
    #   become_method: runas
    #   ansible.builtin.file:
    #     state: absent
    #     path: /home/ansible/.ssh/authorized_keys

    - name: Create ansible's authorized_keys file
      become: true
      become_user: root
      become_method: sudo
      ansible.posix.authorized_key:
        user: ansible
        key: "{{ lookup('file', 'tmpsshid.pub') }}"
        exclusive: true

    - name: Ensure .ssh permissions
      become: true
      become_user: ansible
      become_method: runas
      ansible.builtin.file:
        path: /home/ansible/.ssh
        state: directory
        mode: "0700"

    - name: Save private-key file to pass
      delegate_to: localhost
      become: false
      ansible.builtin.shell: |
        [ -f "~/.password-store/ansible/{{ inventory_hostname_short }}/ssh_id.b64" ] &&
          pass rm "ansible/{{ inventory_hostname_short }}/ssh_id.b64"
        pass file add "ansible/{{ inventory_hostname_short }}/ssh_id" tmpsshid
      when: True

  always:
    - name: Remove ansible's password
      ansible.builtin.user:
        name: ansible
        password: "*"

    - name: Delete OpenSSH keypair
      delegate_to: localhost
      become: true
      become_method: runas
      become_user: "{{ lookup('ansible.builtin.env', 'USER') }}"
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - "tmpsshid"
        - "tmpsshid.pub"