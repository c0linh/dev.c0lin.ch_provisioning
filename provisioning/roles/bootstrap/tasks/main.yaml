# This must be the first task for bootstrapping!
#
# If requiretty is set on the remote host, the bootstrapping itself will
# fail because of pipelining.  Instead, we force the use of paramiko, which
# does not do pipelining.  Alternatively, we could remove the paramiko
# connection specification, but then users would have to run:
#   ANSIBLE_SSH_PIPELINING=0 ansible-playbook playbooks/bootstrap.yaml ...
# - name: remove requiretty from sudoers
#   connection: paramiko
#   lineinfile:
#     path: /etc/sudoers
#     state: absent
#     regexp: ^\s*Defaults\s+requiretty$
#     validate: /usr/sbin/visudo -cf %s
#   when: ansible_connection != "local"

- name: explicitly gather facts
  setup:

# NOTE: It seems weird to run this so late, since other things have assumed
# NOTE: that sudo exists.  However, if this matters (i.e. sudo is not
# NOTE: installed), then the user MUST specify a become_method on the command
# NOTE: line for this role to work at all, so it doesn't really matter when
# NOTE: this particular task is run.
- name: install sudo and acl
  apt:
    name:
      - sudo
      - acl
    state: present
    cache_valid_time: 3600
    force_apt_get: yes

- name: allow ansible user to have passwordless sudo
  lineinfile:
    path: /etc/sudoers.d/ansible
    regexp: "^ansible "
    line: "ansible ALL=(ALL) NOPASSWD: ALL"
    # Older systems require this to be 0440 or sudo breaks.
    mode: 0440
    create: yes
    validate: /usr/sbin/visudo -cf %s

- name: add ansible user and set groups
  user:
    name: ansible
    # On RedHat systems, we put the ansible user in the wheel group to
    # work-around cPanel's open file limit of 100.  Mitogen uses file
    # descriptors 100 and 101 for internal purposes.  See:
    # https://github.com/dw/mitogen/issues/644
    home: "/home/ansible"

- name: Generate an OpenSSH keypair
  delegate_to: localhost
  become: true
  become_method: runas
  become_user: "{{ lookup('ansible.builtin.env', 'USER' }}"
  community.crypto.openssh_keypair: # returns "public_key"
    type: ed25519
    path: id_ssh_ed25519
    passphrase: "{{ passphrase }}"
    #using ansible_host because the ssh-key for the ansible user is directly tied to the machine, not to the inventory_name
  vars:
    passphrase: '{{ lookup(''community.general.passwordstore'',"ansible/{{inventory_hostname_short}}/passphrase", create=true) }}'

- name: create ansible's authorized_keys
  become: true
  become_user: "{{ 'root' if ansible_check_mode else 'ansible' }}"
  authorized_key:
    user: ansible
    path: "/home/ansible/.ssh/authorized_keys"
    key: "{{ lookup('file', 'id_ssh_ed25519.pub') }}"
    exclusive: yes

# This must be after setting up passwordless sudo and the authorized_keys.
- name: remove ansible's password
  user:
    name: ansible
    password: "*"

- name: Save private-key file th pass
  delegate_to: localhost
  become: true
  become_method: runas
  become_user: "{{ lookup('ansible.builtin.env', 'USER' }}"
  ansible.builtin.shell: |
    pass file add "ansible/{{inventory_hostname_short}}/id_ssh_ed25519" "{{ lookup('file', 'id_ssh_ed25519') }}"
    exit 0

- name: Delete OpenSSH keypair
  delegate_to: localhost
  become: true
  become_method: runas
  become_user: "{{ lookup('ansible.builtin.env', 'USER' }}"
  ansible.builtin.file:
    state: absent
    path:
      - "{{ lookup('file', 'id_ssh_ed25519.pub') }}"
      - "{{ lookup('file', 'id_ssh_ed25519') }}"
